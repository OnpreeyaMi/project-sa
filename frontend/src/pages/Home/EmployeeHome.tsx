import React, { useEffect, useMemo, useState } from "react";
import EmployeeSidebar from "../../component/layout/employee/empSidebar";
import { Row, Col, Card, Typography, Button, Tag, message } from "antd";
import {
  ClockCircleOutlined,
  SyncOutlined,
  CarOutlined,
  CheckCircleOutlined,
  CoffeeOutlined,
  PlayCircleOutlined,
} from "@ant-design/icons";
import { EmployeeService } from "../../services/Employee"; // ‚úÖ ‡πÉ‡∏ä‡πâ service (named export)

const { Title } = Typography;

type EmpStatus = "active" | "inactive" | "onleave";

const STATUS_DESC: Record<EmpStatus, string> = {
  active: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏é‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô",
  inactive: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏é‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô",
  onleave: "‡∏•‡∏≤‡∏û‡∏±‡∏Å",
};

const STATUS_TAG: Record<EmpStatus, { color: string; text: string }> = {
  active: { color: "green", text: "‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå" },
  inactive: { color: "default", text: "‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå" },
  onleave: { color: "orange", text: "‡∏•‡∏≤‡∏û‡∏±‡∏Å" },
};

interface Employee {
  id: number; // ‚ö†Ô∏è ‡∏à‡∏≤‡∏Å backend ‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏õ‡πá‡∏ô ID (PascalCase) ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å res ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ
  FirstName?: string;
  LastName?: string;
  Gender?: string;
  Phone?: string;
  PositionID?: number;
  EmployeeStatus?: {
    StatusName?: string;
    StatusDescription?: string;
  };
}

const HomePage: React.FC = () => {
  const employeeId = Number(localStorage.getItem("employeeId") || 0);
  const [loading, setLoading] = useState(false);
  const [emp, setEmp] = useState<Employee | null>(null);

  // helper: ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å response backend -> shape ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ
  const normalize = (raw: any): Employee => ({
    id: raw.ID ?? raw.id ?? 0,
    FirstName: raw.FirstName ?? raw.firstName,
    LastName: raw.LastName ?? raw.lastName,
    Gender: raw.Gender ?? raw.gender,
    Phone: raw.Phone ?? raw.phone,
    PositionID: raw.PositionID ?? raw.positionID,
    EmployeeStatus: raw.EmployeeStatus ?? raw.employeeStatus,
  });

  const currentStatus: EmpStatus = useMemo(() => {
    const name = emp?.EmployeeStatus?.StatusName?.toLowerCase() as EmpStatus | undefined;
    return name || "inactive";
  }, [emp]);

  const currentDesc = useMemo(() => {
    return emp?.EmployeeStatus?.StatusDescription || STATUS_DESC[currentStatus];
  }, [emp, currentStatus]);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
  const fetchMe = async () => {
    if (!employeeId) return;
    try {
      setLoading(true);
      const res = await EmployeeService.get(employeeId);
      setEmp(normalize(res));
    } catch (e) {
      console.error(e);
      message.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchMe();
  }, [employeeId]);

  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡πÉ‡∏ä‡πâ PUT /employees/:id ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏á‡∏Ñ‡πà‡∏≤ field ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÇ‡∏î‡∏ô‡∏•‡πâ‡∏≤‡∏á)
  const changeStatus = async (status: EmpStatus) => {
    if (!employeeId) {
      message.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô (employeeId)");
      return;
    }
    if (!emp) {
      message.error("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô");
      return;
    }

    try {
      setLoading(true);
      const payload = {
        // ‡∏Ñ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏ß‡πâ (‡πÄ‡∏û‡∏£‡∏≤‡∏∞ backend ‡∏à‡∏∞ set ‡∏ó‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô PUT)
        FirstName: emp.FirstName,
        LastName: emp.LastName,
        Gender: emp.Gender,
        Phone: emp.Phone,
        PositionID: emp.PositionID,

        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        Status: status,
        StatusDescription: STATUS_DESC[status],
      };

      const updated = await EmployeeService.update(employeeId, payload);
      setEmp(normalize(updated));

      if (status === "active") message.success("‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß");
      else if (status === "onleave") message.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏≤‡∏û‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
      else message.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß");
    } catch (e: any) {
      console.error(e);
      message.error(e?.response?.data?.error || "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } finally {
      setLoading(false);
    }
  };

  return (
    <EmployeeSidebar>
      <div style={{ padding: 20 }}>
        <Title level={2} style={{ textAlign: "center", marginBottom: 30 }}>
          üè† Employee Dashboard
        </Title>

        {/* ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô */}
        <Row gutter={[16, 16]} justify="center" style={{ marginBottom: 24 }}>
          <Col xs={24} md={16} lg={12}>
            <Card
              loading={loading}
              style={{ borderRadius: 12, boxShadow: "0 4px 12px rgba(0,0,0,0.06)" }}
              title="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
              extra={<Tag color={STATUS_TAG[currentStatus].color}>{STATUS_TAG[currentStatus].text}</Tag>}
            >
              <div style={{ fontSize: 16, marginBottom: 16 }}>
                ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: <b>{currentDesc}</b>
              </div>
              <div style={{ display: "flex", gap: 12, flexWrap: "wrap" }}>
                <Button type="primary" icon={<PlayCircleOutlined />} onClick={() => changeStatus("active")}>
                  ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô
                </Button>
                <Button danger icon={<CoffeeOutlined />} onClick={() => changeStatus("onleave")}>
                  ‡∏•‡∏≤‡∏û‡∏±‡∏Å
                </Button>
              </div>
            </Card>
          </Col>
        </Row>

        {/* ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏£‡∏∏‡∏õ (dummy) */}
        <Row gutter={[24, 24]} justify="center">
          <Col xs={24} sm={12} md={8} lg={6}>
            <Card title="‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" bordered={false} style={{ borderRadius: 12, boxShadow: "0 4px 12px rgba(0,0,0,0.1)" }}>
              <ClockCircleOutlined style={{ fontSize: 40, color: "#faad14" }} />
              <p style={{ marginTop: 10, fontSize: 16 }}>12 Orders</p>
              <Button type="primary" block style={{ marginTop: 10 }}>
                ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
              </Button>
            </Card>
          </Col>

          <Col xs={24} sm={12} md={8} lg={6}>
            <Card title="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡∏±‡∏Å" bordered={false} style={{ borderRadius: 12, boxShadow: "0 4px 12px rgba(0,0,0,0.1)" }}>
              <SyncOutlined spin style={{ fontSize: 40, color: "#1890ff" }} />
              <p style={{ marginTop: 10, fontSize: 16 }}>8 Orders</p>
              <Button type="primary" block style={{ marginTop: 10 }}>
                ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
              </Button>
            </Card>
          </Col>

          <Col xs={24} sm={12} md={8} lg={6}>
            <Card title="‡∏£‡∏≠‡∏à‡∏±‡∏î‡∏™‡πà‡∏á" bordered={false} style={{ borderRadius: 12, boxShadow: "0 4px 12px rgba(0,0,0,0.1)" }}>
              <CarOutlined style={{ fontSize: 40, color: "#722ed1" }} />
              <p style={{ marginTop: 10, fontSize: 16 }}>5 Orders</p>
              <Button type="primary" block style={{ marginTop: 10 }}>
                ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
              </Button>
            </Card>
          </Col>

          <Col xs={24} sm={12} md={8} lg={6}>
            <Card title="‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô" bordered={false} style={{ borderRadius: 12, boxShadow: "0 4px 12px rgba(0,0,0,0.1)" }}>
              <CheckCircleOutlined style={{ fontSize: 40, color: "#52c41a" }} />
              <p style={{ marginTop: 10, fontSize: 16 }}>20 Orders</p>
              <Button type="primary" block style={{ marginTop: 10 }}>
                ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
              </Button>
            </Card>
          </Col>
        </Row>
      </div>
    </EmployeeSidebar>
  );
};

export default HomePage;
